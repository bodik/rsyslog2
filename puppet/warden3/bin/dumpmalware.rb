#!/usr/bin/ruby

require 'elasticsearch'
require 'pp'
require 'optparse'
require "base64"


warden_server = ""
warden_server_service = "_warden-server._tcp"
mid = ""
file = ""

OptionParser.new do |o|
	o.on('-s WARDEN_SERVER') { |b| warden_server = b }
	o.on('-d WARDEN_SERVER_SERVICE') { |b| warden_server_service = b }
	o.on('-i MID') { |b| mid = b }
	o.on('-f FILE') { |b| file = b }
	o.parse!
end

def usage()
	puts "Usage: #{$0} -i <ID> [-s <WARDEN_SERVER>] [-d <WARDEN_SERVICE>]"
end

if mid.empty?
	puts "ERROR: missing id to dump"
	usage()
	exit(1)
end

if warden_server.empty?
	cmd = "/bin/sh /puppet/metalib/avahi.findservice.sh "+warden_server_service
	warden_server = `#{cmd}` ; result=$?.success?
	warden_server = warden_server.chomp()
	#puts "DEBUG: "+warden_server
	if warden_server.empty?
		puts "ERROR: cannot discover warden-server"
		usage()
		exit(1)
	end
end




query = {
        query: { query_string: { query: "_type:\"wb\" AND (_id:"+mid+" OR ID:"+mid+")" } },
	size: 1
}
client = Elasticsearch::Client.new(log: false, host: warden_server+":39200")
data = client.search(index: "_all", body: query)
maldata = Base64.decode64(data["hits"]["hits"][0]["_source"]["Attach"]["Content"])

if file.empty?
	puts maldata
else
	File.open(file, 'w') { |f| f.write(maldata) }
end

