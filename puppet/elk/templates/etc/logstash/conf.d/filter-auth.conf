filter {
	if [type] == "auth" {

		grep {
			negate => true
			match => ["message",
"CRON\[[0-9]+\]:"]
	        }

		#general discards
		grep {
			negate => true
			match => ["message",
"session opened for user|session closed for user|pam_unix\(sshd:auth\): check pass; user unknown|pam_unix\(sshd:auth\): authentication failure|pam_krb5\(sshd:auth\): authentication failure|PAM . more authentication failures*; logname= uid=0 euid=0 tty=ssh ruser= rhost=|skipping, AFS apparently not available|PAM service\(sshd\) ignoring max retries|Disconnecting: Too many authentication failures|input_userauth_request: invalid user |pam_krb5\(sshd:auth\): user.*authenticated as .*@META|unix_chkpwd.*: password check failed for user|not allowed because not listed in AllowUsers|error: Could not get shadow information for NOUSER|nvalid user  from|pam.*error (retrieving|getting) information about|pam.*error resolving user name|systemd-logind\[[0-9]+\]: New session|systemd-logind\[[0-9]+\]: Removed session"]
        	}

		#sshd discards
		grep {
			negate => true
			match => ["message",
"reverse mapping checking getaddrinfo for|last message repeated|subsystem request for sftp|Received disconnect from|but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT|Connection closed by|Connection reset by peer|not a character device"]
		}

		#env specific discards
		grep {
			negate => true
			match => ["message",
"Successful su for rabbitmq by root|root:rabbitmq|zenssh : TTY=unknown ; PWD=/var/lib/zenssh|Successful su for postgres by root|root:postgres|sudo: oneadmin :.*PWD=.*/opt/opennebula/|Received .* principals|su\[[0-9]+\]:.*archive_acct|Could not load host key: /etc/ssh/ssh_host_ecdsa_key|Unable to open env file: /etc/environment: No such file or directory|hpropd\[[0-9]+\]: Connection from|Going to execute command '/usr/local/sbin/upload-acct|systemd-logind:|sg\[[0-9]+\]: user .* to group | per.* su\[[0-9]+\]: | storage-.*jk_[a-z]+\[[0-9]+\]: | SuSE.* not active|unable to dlopen|adding faulty module"]
		}
	




		grok {
			patterns_dir => "/etc/logstash/patterns/"
			match => [ "message", "%{SSHLINE}" ]
			overwrite => [ "message" ]
		}
		date {
			#match => [ "timestamp", "MMM dd HH:mm:ss Z", "MMM  d HH:mm:ss Z", "MMM d HH:mm:ss Z" ]
			match => [ "timestamp", "ISO8601" ]
		}
		geoip {
			source => "remote"
                        fields => ["country_code2", "latitude", "longitude"]
		}
                mutate {
			rename => ["[geoip][country_code2]", "[geoip][cc]"]
			remove_field => ["timestamp", "[geoip][latitude]", "[geoip][longitude]"]
                }
	}
}


